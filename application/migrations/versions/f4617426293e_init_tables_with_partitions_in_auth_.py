"""init tables with  partitions in auth_history table

Revision ID: f4617426293e
Revises: 
Create Date: 2022-10-04 14:31:14.175935

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f4617426293e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permission',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('permission_name', sa.String(length=128), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('permission_name')
    )
    op.create_table('role',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('role_name', sa.String(length=148), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role_name')
    )
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=256), nullable=False),
    sa.Column('password', sa.String(length=256), nullable=False),
    sa.Column('is_active', sa.Boolean(create_constraint=True), nullable=True),
    sa.Column('social_signup', sa.Boolean(), nullable=True),
    sa.Column('data_joined', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('auth_history',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(length=256), nullable=True),
    sa.Column('action', sa.Enum('SIGNUP', 'LOGIN', 'LOGOUT', 'CHANGE_PASSWORD', 'CHANGE_LOGIN', name='actions_names'), nullable=False),
    sa.Column('action_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('browser', sa.String(length=128), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'browser'),
    sa.UniqueConstraint('id', 'browser'),
    postgresql_partition_by='LIST (browser)'
    )

    op.execute(
        """CREATE TABLE IF NOT EXISTS "auth_history_chrome" PARTITION OF "auth_history" FOR VALUES IN ('Chrome')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "auth_history_firefox" PARTITION OF "auth_history" FOR VALUES IN ('Firefox')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "auth_history_opera" PARTITION OF "auth_history" FOR VALUES IN ('Opera')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "auth_history_safari" PARTITION OF "auth_history" FOR VALUES IN ('Safari')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "auth_history_yandex" PARTITION OF "auth_history" FOR VALUES IN ('Yandex')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "auth_history_unknown" PARTITION OF "auth_history" FOR VALUES IN ('Unknown')"""
    )

    op.create_table('profile',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('first_name', sa.String(length=128), nullable=True),
    sa.Column('last_name', sa.String(length=128), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', name='genders_names'), nullable=True),
    sa.Column('phone', sa.String(length=15), nullable=True),
    sa.Column('city', sa.String(length=128), nullable=True),
    sa.Column('country', sa.String(length=128), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('provider',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('provider_name', sa.String(length=256), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role_permission',
    sa.Column('permission_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE')
    )
    op.create_table('user_permission',
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('permission_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    op.create_table('user_role',
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_role')
    op.drop_table('user_permission')
    op.drop_table('role_permission')
    op.drop_table('provider')
    op.drop_table('profile')
    op.drop_table('auth_history')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('permission')

    # DROP custom types
    sa.Enum(name='actions_names').drop(op.get_bind(), checkfirst=False)
    sa.Enum(name='genders_names').drop(op.get_bind(), checkfirst=False)

    # ### end Alembic commands ###
